/* 一个进程，包括代码、数据和分配给进程的资源。fork（）函数通过系统调用创建一个与原来进程几乎完全相同的进程，也就是两个进程可以做完全
相同的事，但如果初始参数或者传入的变量不同，两个进程也可以做不同的事。
  一个进程调用fork（）函数后，系统先给新的进程分配资源，例如存储数据和代码的空间。
  然后把原来的进程的所有值都复制到新的新进程中，只有少数值与原来的进程的值不同。相当于克隆了一个自己。
  在fork函数执行完毕后，如果创建新进程成功，则出现两个进程，一个是子进程，一个是父进程。在子进程中，fork函数返回0，在父进程中，fork返回新创建子进程的进程ID。
  我们可以通过fork返回的值来判断当前进程是子进程还是父进程。*/
#include <stdio.h>
#include <sys/types.h>
//#include <window.h>
#include <unistd.h>
int main()
{
	unsigned short a = 65536;//unsigned short:[0,65535].short:[-32768,32767]
	printf("%d\n",a);	//0
	short b = 32768;//unsigned short:[0,65535].short:[-32768,32767]
	printf("%d\n",b);	//-32768
	for(int i=0;i<2;i++)
	{
		//fork();		//总结一下规律，对于这种N次循环的情况，执行printf函数的次数为2*（1+2+4+……+2N）次，创建的子进程数为1+2+4+……+2N个。
		printf("hello");//打印6次hello，创建了3个子进程
	}
}